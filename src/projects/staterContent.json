{
  "cpp": {
    "dir": [".vscode", "bin", "include", "lib", "src"],
    "files": [
      {
        "name": "main.cpp",
        "parent": "src",
        "content": [
          "#include <iostream>\n",
          "using namespace std;\n\n",
          "int main()\n{",
          "\n\t",
          "\n\treturn 0;\n",
          "}"
        ]
      },
      {
        "name": "Makefile",
        "content": [
          "CC\t\t:= g++\n",
          "C_FLAGS := -std=c++17 -Wall -Wextra\n\n",
          "BIN\t\t:= bin\n",
          "SRC\t\t:= src\n",
          "INCLUDE\t:= include\n",
          "LIB\t\t:= lib\n\n",
          "LIBRARIES\t:=\n\n",
          "ifeq ($(OS),Windows_NT)\n",
          "EXECUTABLE\t:= main.exe\n",
          "else\n",
          "EXECUTABLE\t:= main\n",
          "endif\n\n",
          "all: $(BIN)/$(EXECUTABLE)\n\n",
          "clean:\n",
          "\t$(RM) $(BIN)/$(EXECUTABLE)\n\n",
          "run: all\n",
          "\t./$(BIN)/$(EXECUTABLE)\n\n",
          "$(BIN)/$(EXECUTABLE): $(SRC)/*\n",
          "\t$(CC) $(C_FLAGS) -I$(INCLUDE) -L$(LIB) $^ -o $@ $(LIBRARIES)"
        ]
      }
    ]
  },

  "c": {
    "dir": [".vscode", "bin", "include", "lib", "src"],
    "files": [
      {
        "name": "main.c",
        "parent": "src",
        "content": [
          "#include <stdio.h>\n",
          "int main()\n{",
          "\n\t",
          "\n\treturn 0;\n",
          "}"
        ]
      },
      {
        "name": "Makefile",
        "content": [
          "CC\t\t:= g++\n",
          "C_FLAGS := -std=c++17 -Wall -Wextra\n\n",
          "BIN\t\t:= bin\n",
          "SRC\t\t:= src\n",
          "INCLUDE\t:= include\n",
          "LIB\t\t:= lib\n\n",
          "LIBRARIES\t:=\n\n",
          "ifeq ($(OS),Windows_NT)\n",
          "EXECUTABLE\t:= main.exe\n",
          "else\n",
          "EXECUTABLE\t:= main\n",
          "endif\n\n",
          "all: $(BIN)/$(EXECUTABLE)\n\n",
          "clean:\n",
          "\t$(RM) $(BIN)/$(EXECUTABLE)\n\n",
          "run: all\n",
          "\t./$(BIN)/$(EXECUTABLE)\n\n",
          "$(BIN)/$(EXECUTABLE): $(SRC)/*\n",
          "\t$(CC) $(C_FLAGS) -I$(INCLUDE) -L$(LIB) $^ -o $@ $(LIBRARIES)"
        ]
      }
    ]
  },
  "node": {
    "dir": ["middlewares", "modules", "routes", "services"],
    "files": [
      {
        "name": "app.js",
        "parent": "",
        "content": [
          "/**\n",
          " * import all the necessary package\n",
          " */\n",
          "require('dotenv').config();\n\n",
          "const morgan = require('morgan');\n",
          "const express = require('express');\n",
          "const app = express();\n\n",
          "const { PORT } = process.env;\n",
          "/**\n",
          " * Connect to the mongodb database\n",
          " */\n",
          "const { connectMongoDB } = require('./services/database');\n",
          "connectMongoDB();\n\n",
          "/**\n",
          " * middlewares\n",
          " */\n",
          "app.use(express.urlencoded({ extended: false }));\n",
          "app.use(express.json());\n",
          "app.use(morgan('dev'));\n\n",
          "/**\n",
          " * Custom routes\n",
          " *\n",
          " * You can add your custom routes in routes folder\n",
          " * Import in this file and use it\n",
          " *\n",
          " */\n",
          "const hello = require('./routes/hello')\n",
          "app.use('/', hello);\n\n",
          "/**\n",
          " * Listening on the PORT defined by .env file\n",
          " */\n",
          "app.listen(PORT, () => {\n",
          "\tconsole.log(`Listening on Port ${PORT}`);\n",
          "});\n"
        ]
      },
      {
        "name": "README.md",
        "parent": "",
        "content": ["This is readme file"]
      },
      {
        "name": ".env",
        "parent": "",
        "content": ["PORT=5000\n", "DATABASE=development"]
      },
      {
        "name": "database.js",
        "parent": "services",
        "content": [
          "require('dotenv').config();\n\n",
          "const mongoose = require('mongoose');\n\n",
          "const { DATABASE } = process.env;\n\n",
          "mongoose.set('strictQuery', true);\n\n",
          "const connectMongoDB = () => {\n",
          "\t/**\n",
          "\t * Connecting to mongodb database\n",
          "\t */\n",
          "\tmongoose\n",
          "\t  .connect('mongodb://127.0.0.1/' + DATABASE)\n",
          "\t  .then(() =>\n",
          "\t    console.log('Successfully connect to ' + DATABASE + ' database')\n",
          "\t)\n",
          "\t  .catch((err) => console.log('Connection err',err));\n",
          "};\n\n",
          "module.exports = { connectMongoDB };\n"
        ]
      },
      {
        "name": "hello.js",
        "parent": "routes",
        "content": [
          "const express = require('express');\n",
          "const router = express.Router();\n\n",
          "router.get('/', (req, res) => {\n",
          "\tres.send('Hello from Node');\n",
          "});\n\n",
          "module.exports = router;\n"
        ]
      }
    ]
  }
}
